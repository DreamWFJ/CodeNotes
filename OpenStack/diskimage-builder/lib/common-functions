#!/bin/bash
# Copyright 2012 Hewlett-Packard Development Company, L.P.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


# 默认的Linux发行版中的内核配置都会开启tmpfs，映射到了/dev/下的shm目录。可以通过df 命令查看结果.
# /dev/shm/是linux下一个非常有用的目录，因为这个目录不在硬盘上，而是在内存里。因此在linux下，就不需要大费周折去建ramdisk，直接使用/dev/shm/就可达到很好的优化效果。
# 默认系统就会加载/dev/shm ，它就是所谓的tmpfs，有人说跟ramdisk（虚拟磁盘），但不一样。象虚拟磁盘一样，tmpfs 可以使用您的 RAM，
# 但它也可以使用您的交换分区来存储。而且传统的虚拟磁盘是个块设备，并需要一个 mkfs 之类的命令才能真正地使用它，tmpfs 是一个文件系统，而不是块设备；您只是安装它，它就可以使用了。

# tmpfs有以下优势：
# 1。动态文件系统的大小，/dev /shm/需要注意的一个是容量问题，在linux下，它默认最大为内存的一半大小，使用df -h命令可以看到。但它并不会真正的占用这块内存，
# 如果/dev/shm/下没有任何文件，它占用的内存实际上就是0字节；如果它最大为1G，里头放有 100M文件，那剩余的900M仍然可为其它应用程序所使用，但它所占用的100M内存，
# 是绝不会被系统回收重新划分的
# 2。tmpfs 的另一个主要的好处是它闪电般的速度。因为典型的 tmpfs 文件系统会完全驻留在 RAM 中，读写几乎可以是瞬间的。
# 3。tmpfs 数据在重新启动之后不会保留，因为虚拟内存本质上就是易失的。所以有必要做一些脚本做诸如加载，绑定的操作

# 该函数检测是否需要虚拟磁盘文件系统加速镜像创建
function tmpfs_check() {
  # ${1:-1}表示如果传递了1个参数，则返回该参数的值，否则返回1
  local echo_message=${1:-1}
  # 不使用tmpfs加速镜像创建，值默认为0，在img-defaults文件中设置，为0表示需要
  [ "$DIB_NO_TMPFS" == "0" ] || return 1
  # 测试XFS系统(将底层硬件当文件使用)下的proc是否可读
  [ -r /proc/meminfo ] || return 1
  # 获取系统总的内存
  total_kB=$(awk '/^MemTotal/ { print $2 }' /proc/meminfo)
  # tmpfs uses by default 50% of the available RAM, so the RAM should be at least
  # the double of the minimum tmpfs size required
  # tmpfs使用可用RAM的50%，因此这里对请求的TMPFS大小乘以2后再去判断
  RAM_NEEDED=$(($DIB_MIN_TMPFS * 2))
  [ $total_kB -lt $(($RAM_NEEDED*1024*1024)) ] || return 0
  if [ $echo_message == '1' ]; then
    echo "WARNING: Not enough RAM to use tmpfs for build. Using ${TMP_DIR:-/tmp}. ($total_kB < ${RAM_NEEDED}G)"
  fi
  return 1
}

function mk_build_dir () {
  # 建立临时目录
  TMP_BUILD_DIR=$(mktemp -t -d --tmpdir=${TMP_DIR:-/tmp} dib_build.XXXXXXXX)
  TMP_IMAGE_DIR=$(mktemp -t -d --tmpdir=${TMP_DIR:-/tmp} dib_image.XXXXXXXX)
  # 注意：下面的die函数是自己写的
  [ $? -eq 0 ] || die "Failed to create tmp directory"
  export TMP_BUILD_DIR
  # 检查内存信息，看是否够使用，以确定是否需要使用tmpfs
  if tmpfs_check ; then
    # 挂载文件系统类型为tmpfs 的设备tmpfs到指定的目录，这样就可以直接通过写文件实现数据写入内存，速度快
    sudo mount -t tmpfs tmpfs $TMP_BUILD_DIR
    sudo mount -t tmpfs tmpfs $TMP_IMAGE_DIR
    # 更改文件的所属用户和分组
    sudo chown $(id -u):$(id -g) $TMP_BUILD_DIR $TMP_IMAGE_DIR
  fi
  # 设置捕获到退出信号时，进行清理
  trap trap_cleanup EXIT
  echo Building in $TMP_BUILD_DIR
  # 建立3个临时环境变量，生成的镜像路径，钩子路径
  export TMP_IMAGE_PATH=$TMP_IMAGE_DIR/image.raw
  export OUT_IMAGE_PATH=$TMP_IMAGE_PATH
  export TMP_HOOKS_PATH=$TMP_BUILD_DIR/hooks
}

# 该函数功能：将旧的镜像以及校验信息归档，将新产生的镜像和校验文件命名为指定名称
function finish_image () {
    # 如果传递了参数，并且设置了重新旧的镜像则执行下面的内容
    # 设置旧的镜像文件名称，并保持，保存md5, sha256信息
    if [ -f $1 -a ${OVERWRITE_OLD_IMAGE:-0} -eq 0 ]; then
      # 设置旧的镜像名称，在后缀名之前加上时间
      old_image="${1%.*}"-$(date +%Y.%m.%d-%H.%M.%S).${1##*.}
      echo "Old image found. Renaming it to $old_image"
      mv "$1" "$old_image"
      if [ -f "$1.md5" ]; then
        mv "$1.md5" "$old_image.md5"
      fi
      if [ -f "$1.sha256" ]; then
        mv "$1.sha256" "$old_image.sha256"
      fi
    fi
    # 将新产生的镜像名称命名为默认或者客户指定的镜像名称
    mv $OUT_IMAGE_PATH $1
    if [ "$DIB_CHECKSUM" == "1" ]; then
      md5sum $1 > $1.md5
      sha256sum $1 > $1.sha256
    fi
    echo "Image file $1 created..."
}

# 保存镜像
function save_image () {
    finish_image $1
}

# 注意，不同元素下的目录下的执行脚本，名字不能有重复的，假如不同的元素可能都有extra-data.d目录，则要求脚本名不一样，不然没法执行
function copy_hooks_not_overwrite () {
    # 获取文件名
    _DIR=$(basename $1)
    # 判断钩子目录下某个子目录是否存在，不存在则创建
    test -d $TMP_HOOKS_PATH/$_DIR || mkdir $TMP_HOOKS_PATH/$_DIR
    # 遍历钩子目录
    for _HOOK in $(ls $1); do
      # 如果钩子目录下某个元素不是文件，则归档到指定的目录下
      if [ ! -f $TMP_HOOKS_PATH/$_DIR/$_HOOK ]; then
        # -t 目标目录，-a 表示归档，保留原文件属性的前提下,复制所有文件 文件夹 和文件链接结构
        cp -t $TMP_HOOKS_PATH/$_DIR -a $1/$_HOOK
      else
        echo "There is a duplicated hook in your elements: $_ELEMENT/$_DIR/$_HOOK"
        exit 1
      fi
    done
}

# 遍历收集到的元素，将元素目录文件统一拷贝到镜像建造路径下的钩子目录中
function generate_hooks () {
  # 首先创建钩子目录
  mkdir -p $TMP_HOOKS_PATH
  # 遍历镜像元素
  for _ELEMENT in $IMAGE_ELEMENT ; do
    # 首先将元素路径中的:号替换为空格，则返回一个数组（注意：默认的分隔符为空格，这样在遍历的时候自动以空格划分元素）
    for dir in ${ELEMENTS_PATH//:/ } ; do
      # 如果不是目录，则遍历下一条数据
      [ -d $dir/$_ELEMENT ] || continue
      # 查找目录，深度为1，忽略掉tests名称的目录，--follow或者-L表示如果是符号链接文件，则跟踪至链接所指向的文件
      for _DIR in $(find $dir/$_ELEMENT -follow -mindepth 1 -maxdepth 1 -type d -not -name tests); do
        # 将钩子文件（即元素目录）下的文件拷贝到建造目录中
        copy_hooks_not_overwrite $_DIR
      done
      # 查找文件，深度为1，找到之后进行归档
      for _FILE in $(find $dir/$_ELEMENT -follow -maxdepth 1 -type f); do
        cp -t $TMP_HOOKS_PATH -a $_FILE
      done
      break
    done
  done
}
# 调用支持进入程序如果命名点在断电列表中
# Call the supplied break-in routine if the named point is listed in the break
# list.
# $1 the break point.
# $2.. what to call if a break is needed
function check_break () {
  # 这里的正则表达式和break变量不大明白 -------------------------------- ?
  if echo "${break:-}" | egrep -e "(,|^)$1(,|$)" -q; then
    echo "Starting debug shell. Exit to resume building." >&2
    echo At stage $1 >&2
    shift
    "$@"
    echo "Resuming" >&2
  fi
}

# Check that a real element has been chosen (prevents foot-guns)
function check_element () {
  # 检查钩子目录（添加的元素对应的目录），将钩子目录下的文件拷贝到镜像建造目录中
  [ -d $TMP_HOOKS_PATH ] || generate_hooks
}

# Run a hook, looking for a regex in its stdout, and eval the matched lines.
# $1 is the hook to run
# $2 is the regex to look for
function eval_run_d () {
    # 产生一个临时文件
    local run_output=$(mktemp)
    # 捕获出错时，执行清除信息
    trap "rm -f $run_output; check_break after-error ${break_cmd:-bash}" ERR
    # 执行
    run_d $1 $run_output
    # 安静的在输出文件中查找指定的内容，找到则执行该内容
    if grep -q "$2" $run_output; then
        local temp=$(grep "$2" $run_output)
        eval "$temp"
    fi
    rm $run_output
    # 取消错误捕获
    trap - ERR
}

function cleanup_build_dir () {
    # 设置5s后执行shell命令，删除临时建立的目录
    if ! timeout 5  sh -c " while ! sudo rm -rf $TMP_BUILD_DIR/built; do sleep 1; done"; then
        echo "ERROR: unable to cleanly remove $TMP_BUILD_DIR/built"
        exit 1
    fi
    # 删除临时目录下的挂载
    sudo rm -rf $TMP_BUILD_DIR/mnt
    # 如果挂载了tmpfs文件，则卸载
    if tmpfs_check 0; then
        sudo umount -f $TMP_BUILD_DIR || true
    fi
    # rm的一些选项
    # --one-file-system 参数表示递归删除一个层级时，跳过所有不符合命令行参数的文件系统上的文件
    # -i 在删除前需要确认 -I 在删除超过三个文件或者递归删除前要求确认
    # -r, -R, --recursive 递归删除目录及其内容
    # -- 将 -r不解释为参数，比如 rm -- -r，而是删除-r这个文件或在目录
    rm -rf --one-file-system $TMP_BUILD_DIR
}

# 清除镜像目录
function cleanup_image_dir () {
    if tmpfs_check 0; then
        sudo umount -f $TMP_IMAGE_DIR || true
    fi
    rm -rf --one-file-system $TMP_IMAGE_DIR
}

# Run a directory of hooks outside the target (that is, no chrooting).
# $1是需要运行的钩子名称
# $2是运行的结果存放点
# 该函数功能是：执行某个目录下的脚本
function run_d() {
    check_element
    check_break before-$1 ${break_cmd:-bash}
    if [ -d ${TMP_HOOKS_PATH}/$1.d ] ; then
        # 判断是否需要存储执行结果
        if [ -n "$2" ]; then
            # 执行目录下的文件，并将输出写到指定文件
            # tee命令读取标准输入，把这些内容同时输出到标准输出和（多个）文件中，与ls > a.txt不同的是，可以同时在界面显示结果，又保存到文件
            dib-run-parts ${TMP_HOOKS_PATH}/$1.d | tee $2
            # PIPESTATUS 是一个数组，第一条命令的返回码存储在${PIPESTATUS[0]}，以此类推，这是内置变量
            if [[ ${PIPESTATUS[0]} != 0 ]]; then
                return 1
            fi
        else
            dib-run-parts ${TMP_HOOKS_PATH}/$1.d
        fi
    fi
    check_break after-$1 bash
}

# 分离回环设备
function detach_loopback() {
    local loopdev=$1

    # Remove the map if it exists
    # If setup on a rhel or derivative the map was created with kpartx not losetup
    # and subsequently needs to be removed.
    # 将/dev/从参数中去掉
    loopdev_name=$(echo $loopdev | sed 's/\/dev\///g')
    # dmsetup 显示当前的device mapper的信息
    # dmsetup ls
    # dmsetup info
    # dmsetup status
    # dmsetup deps
    # dmsetup table
    # 。。。
    if sudo dmsetup ls | grep $loopdev_name; then
        mapper_name=$(sudo dmsetup ls | grep $loopdev_name | awk '{ print $1 }')
        # --noudevsync 表示在增删改查上不同步到udev
        # udev是linux的设备管理器，支持热插拔，采用用户空间工具来管理/dev/目录树
        sudo dmsetup --noudevsync remove $mapper_name
    fi

    # loopback dev may be tied up a bit by udev events triggered by partition events
    # seq 10 -1 1表示打印10至1，每次递减1的数字，下面表示尝试10，去卸载循环设备
    for try in $(seq 10 -1 1) ; do
        # losetup命令用来设置循环设备。循环设备可把文件虚拟成块设备，籍此来模拟整个文件系统，让用户得以将其视为硬盘驱动器，光驱或软驱等设备，并挂入当作目录来使用
        # -e 表示加密的方式， -o 设置数据偏移量，-d 卸载设备
        # 循环设备名称，在linux下如 /dev/loop0, /dev/loop1
        #使用举例
        #（1）创建空的磁盘镜像文件，这里创建一个1.44M的软盘
        #          $ dd if=/dev/zero of=floppy.img bs=512 count=2880
        #（2）使用 losetup将磁盘镜像文件虚拟成快设备
        #          $ losetup /dev/loop1 floppy.img
        #（3）挂载块设备
        #          $ mount /dev/loop0 /tmp
        #    经过上面的三步之后，我们就可以通过/tmp目录，像访问真实快设备一样来访问磁盘镜像文件floppy.img。
        #（4） 卸载loop设备
        #          $ umount /tmp
        #          $ losetup -d /dev/loop1
        if ! sudo losetup $loopdev || sudo losetup -d $loopdev ; then
            return 0
        fi
        echo $loopdev may be busy, sleeping up to $try more seconds...
        sleep 1
    done
    echo Gave up trying to detach $loopdev
    return 1
}

# 搜集默认元素和客户定制的元素信息
function arg_to_elements() {
  # for循环中省略in则是对位置参数$@进行循环
  for arg do IMAGE_ELEMENT="$IMAGE_ELEMENT $arg" ; done
  # 是否跳过base元素
  if [ "$SKIP_BASE" != "1" ]; then
    IMAGE_ELEMENT="base $IMAGE_ELEMENT"
  fi
  # 如果是ramdisk则还需要添加相关元素
  if [ "$IS_RAMDISK" == "1" ]; then
    IMAGE_ELEMENT="$RAMDISK_ELEMENT $IMAGE_ELEMENT"
  fi
  echo "Building elements: $IMAGE_ELEMENT"
  # 调用python脚本element-info获取镜像元素信息
  IMAGE_ELEMENT=$($SCRIPT_HOME/element-info $IMAGE_ELEMENT)
  export IMAGE_ELEMENT

  echo "Expanded element dependencies to: $IMAGE_ELEMENT"
}

function create_base () {
    # 创建临时挂载路径
    mkdir $TMP_BUILD_DIR/mnt
    export TMP_MOUNT_PATH=$TMP_BUILD_DIR/mnt
    # Copy data in to the root.
    # 执行建造目录下钩子目录中的root.d下的脚本
    TARGET_ROOT=$TMP_MOUNT_PATH run_d root
    if [ -z "$(ls $TMP_MOUNT_PATH | grep -v '^lost+found\|tmp$')" ] ; then
        # No root element copied in. Note the test above allows
        # root.d elements to put things in /tmp
        echo "Failed to deploy the root element."
        exit 1
    fi
    # 重新配置DNS
    # Configure Image
    # Setup resolv.conf so we can chroot to install some packages
    if [ -L $TMP_MOUNT_PATH/etc/resolv.conf ] || [ -f $TMP_MOUNT_PATH/etc/resolv.conf ] ; then
        sudo mv $TMP_MOUNT_PATH/etc/resolv.conf $TMP_MOUNT_PATH/etc/resolv.conf.ORIG
    fi

    # Recreate resolv.conf
    sudo touch $TMP_MOUNT_PATH/etc/resolv.conf
    sudo chmod 777 $TMP_MOUNT_PATH/etc/resolv.conf
    # use system configured resolv.conf if available to support internal proxy resolving
    if [ -e /etc/resolv.conf ]; then
        cat /etc/resolv.conf > $TMP_MOUNT_PATH/etc/resolv.conf
    else
        echo nameserver 8.8.8.8 > $TMP_MOUNT_PATH/etc/resolv.conf
    fi
    mount_proc_dev_sys
}

# 需要多多研究下Mount命令---------------------------------------！！！
function mount_proc_dev_sys () {
    # supporting kernel file systems
    # 把类型为proc的虚拟文件系统挂载到/proc目录
    # 常见的虚拟文件系统有shm, ramfs, proc, sysfs, tmpfs，指定挂载设备时这里可以填none
    sudo mount -t proc none $TMP_MOUNT_PATH/proc
    # 将/dev挂载到指定目录，相当于同步/dev中的数据到指定目录，--bind取消挂载时，会还原$TMP_MOUNT_PATH/dev中的数据
    sudo mount --bind /dev $TMP_MOUNT_PATH/dev
    sudo mount --bind /dev/pts $TMP_MOUNT_PATH/dev/pts
    sudo mount -t sysfs none $TMP_MOUNT_PATH/sys
}

# Recursively unmount directories under a given directory DIR
# usage:
#  unmount_dir DIR
function unmount_dir {
    local dir="$1"
    local real_dir
    local mnts

    if [ ! -d $dir ]; then
        echo "*** $dir is not a directory"
        return 1
    fi

    # get rid of any symlink elements in the incoming path, because
    # /proc/mounts is the real path
    # readlink -e 表示规范化每一符号链接与原有的一一对应，而且都必须存在
    # -f 只要求最后一个存在
    real_dir=$(readlink -e $dir)

    mnts=$(awk '{print $2}' < /proc/mounts | grep "^$real_dir" | sort -r)
    for m in $mnts; do
        echo "Unmount $m"
        # 强制卸载，并延后清理数据
        sudo umount -fl $m || true
    done
}
