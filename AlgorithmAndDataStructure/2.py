# -*- coding: utf-8 -*-
# USER: Test
# Time: 2019/7/29 9:39

import time
import random
import copy
import functools
import collections

random.seed(1)
a = [random.randint(1, 2000) for _ in range(2000)]
result = [2, 4, 5, 7, 8, 8, 9, 10, 11, 12, 12, 14, 16, 17, 18, 18, 18, 19, 20, 21, 21, 22, 23, 26, 26, 28, 30, 30, 30,
          32, 32, 35, 36, 37, 38, 38, 38, 39, 41, 42, 43, 43, 44, 45, 45, 45, 46, 48, 49, 50, 50, 51, 53, 54, 56, 57,
          58, 59, 60, 60, 61, 62, 63, 63, 63, 63, 64, 66, 67, 68, 71, 71, 72, 73, 73, 75, 77, 78, 81, 82, 82, 83, 83,
          83, 84, 85, 88, 90, 90, 92, 93, 93, 94, 95, 97, 98, 98, 99, 100, 100, 102, 103, 105, 107, 109, 114, 115, 115,
          116, 117, 120, 120, 120, 121, 121, 124, 125, 125, 128, 129, 130, 132, 132, 132, 133, 134, 137, 138, 139, 140,
          141, 141, 143, 143, 144, 145, 145, 146, 147, 149, 149, 149, 149, 150, 150, 151, 154, 154, 154, 157, 157, 157,
          158, 161, 161, 162, 163, 167, 168, 168, 171, 172, 174, 175, 176, 178, 179, 183, 183, 184, 185, 186, 186, 186,
          186, 187, 187, 188, 188, 188, 189, 191, 193, 193, 196, 198, 198, 200, 202, 203, 203, 204, 204, 205, 205, 206,
          207, 207, 207, 207, 210, 211, 211, 212, 212, 214, 214, 215, 217, 218, 219, 220, 221, 222, 222, 223, 225, 228,
          229, 231, 232, 234, 234, 235, 235, 236, 237, 238, 238, 239, 240, 241, 242, 242, 242, 242, 243, 245, 246, 248,
          250, 250, 253, 254, 254, 257, 257, 258, 259, 259, 259, 260, 261, 263, 265, 265, 266, 266, 267, 267, 267, 267,
          268, 269, 273, 274, 276, 276, 277, 278, 280, 283, 284, 284, 284, 285, 288, 290, 291, 297, 298, 300, 302, 304,
          304, 304, 304, 304, 305, 305, 306, 307, 307, 307, 310, 312, 312, 316, 319, 320, 320, 322, 322, 324, 325, 326,
          327, 327, 328, 329, 332, 332, 333, 334, 336, 337, 338, 338, 339, 340, 342, 343, 343, 343, 344, 345, 345, 346,
          346, 346, 348, 348, 349, 349, 352, 352, 353, 353, 353, 354, 355, 355, 355, 356, 359, 361, 362, 363, 364, 364,
          365, 365, 367, 368, 371, 372, 376, 379, 379, 381, 383, 383, 384, 385, 386, 387, 389, 389, 389, 389, 390, 394,
          398, 400, 402, 405, 408, 408, 409, 409, 410, 410, 411, 411, 411, 412, 413, 413, 417, 418, 418, 419, 420, 421,
          421, 421, 422, 423, 423, 424, 424, 426, 426, 426, 428, 428, 429, 430, 434, 435, 435, 437, 437, 438, 439, 440,
          440, 441, 442, 444, 444, 446, 446, 446, 448, 449, 450, 451, 451, 452, 453, 455, 455, 456, 458, 459, 461, 462,
          463, 465, 466, 467, 469, 469, 470, 471, 473, 475, 476, 476, 478, 478, 479, 481, 482, 482, 483, 486, 489, 491,
          493, 494, 495, 495, 497, 498, 498, 500, 501, 502, 503, 503, 503, 504, 505, 505, 507, 508, 509, 509, 512, 513,
          513, 513, 513, 514, 514, 516, 516, 517, 518, 518, 519, 519, 520, 521, 523, 523, 523, 523, 523, 525, 526, 528,
          529, 529, 529, 530, 530, 531, 531, 532, 532, 533, 533, 534, 534, 535, 536, 537, 542, 544, 545, 546, 546, 547,
          547, 548, 548, 548, 549, 549, 549, 551, 551, 552, 552, 552, 553, 553, 554, 554, 554, 555, 557, 559, 559, 560,
          561, 561, 563, 563, 564, 565, 568, 568, 569, 569, 571, 572, 573, 574, 576, 576, 577, 577, 579, 581, 582, 582,
          582, 584, 589, 589, 589, 592, 594, 595, 596, 596, 597, 597, 602, 603, 603, 604, 606, 606, 606, 606, 607, 608,
          608, 609, 611, 611, 612, 612, 613, 614, 614, 615, 616, 619, 619, 620, 621, 622, 622, 622, 623, 624, 625, 626,
          626, 626, 627, 628, 629, 630, 630, 631, 632, 635, 636, 638, 638, 639, 639, 641, 641, 642, 642, 643, 645, 647,
          648, 649, 649, 650, 650, 650, 651, 651, 653, 655, 655, 656, 657, 658, 659, 660, 663, 665, 667, 667, 667, 667,
          667, 671, 671, 672, 672, 676, 676, 677, 677, 679, 681, 682, 684, 685, 688, 689, 690, 691, 691, 694, 694, 694,
          694, 694, 695, 695, 696, 697, 698, 699, 702, 704, 705, 705, 706, 708, 708, 709, 711, 711, 711, 713, 716, 717,
          718, 721, 723, 724, 724, 727, 727, 728, 729, 729, 731, 731, 732, 736, 737, 739, 740, 741, 746, 747, 748, 752,
          752, 754, 754, 754, 754, 755, 755, 756, 759, 759, 759, 759, 762, 764, 766, 768, 773, 774, 774, 775, 775, 775,
          776, 777, 778, 778, 779, 779, 780, 780, 781, 784, 784, 785, 785, 786, 786, 787, 787, 792, 792, 794, 796, 798,
          798, 798, 799, 799, 799, 799, 800, 801, 802, 804, 806, 806, 806, 807, 807, 809, 810, 811, 814, 814, 814, 814,
          815, 817, 818, 818, 819, 819, 820, 821, 822, 823, 824, 824, 824, 824, 825, 825, 827, 828, 829, 830, 833, 834,
          835, 836, 837, 837, 838, 839, 842, 843, 843, 844, 845, 846, 846, 847, 847, 848, 849, 849, 851, 853, 853, 854,
          854, 856, 860, 861, 862, 862, 863, 863, 865, 865, 865, 866, 869, 869, 871, 871, 872, 872, 873, 873, 874, 874,
          874, 876, 877, 878, 880, 881, 884, 885, 885, 885, 886, 887, 887, 887, 887, 888, 892, 896, 897, 898, 898, 899,
          899, 900, 902, 903, 906, 906, 907, 908, 909, 910, 912, 913, 913, 914, 915, 915, 917, 917, 918, 919, 921, 921,
          921, 922, 922, 924, 924, 924, 926, 926, 927, 927, 928, 929, 931, 932, 934, 935, 938, 939, 939, 941, 941, 942,
          944, 946, 947, 948, 948, 952, 952, 952, 957, 959, 961, 961, 961, 962, 964, 968, 971, 977, 981, 982, 983, 983,
          983, 984, 984, 984, 986, 986, 986, 988, 991, 991, 993, 993, 994, 995, 995, 996, 996, 997, 998, 1000, 1000,
          1002, 1003, 1006, 1007, 1007, 1008, 1009, 1009, 1009, 1009, 1010, 1011, 1011, 1013, 1014, 1014, 1014, 1015,
          1016, 1017, 1017, 1020, 1022, 1023, 1024, 1024, 1025, 1026, 1026, 1027, 1027, 1027, 1029, 1030, 1031, 1033,
          1034, 1035, 1037, 1037, 1037, 1039, 1040, 1040, 1041, 1041, 1042, 1043, 1043, 1044, 1044, 1045, 1045, 1046,
          1046, 1047, 1048, 1048, 1048, 1048, 1050, 1050, 1051, 1053, 1053, 1053, 1054, 1054, 1055, 1058, 1059, 1061,
          1063, 1066, 1066, 1067, 1067, 1068, 1070, 1072, 1073, 1073, 1073, 1074, 1075, 1076, 1077, 1078, 1078, 1079,
          1079, 1081, 1081, 1082, 1083, 1083, 1083, 1083, 1088, 1089, 1090, 1090, 1091, 1092, 1093, 1094, 1095, 1095,
          1095, 1096, 1097, 1099, 1100, 1100, 1101, 1102, 1103, 1103, 1103, 1105, 1106, 1107, 1108, 1108, 1109, 1109,
          1110, 1111, 1111, 1112, 1112, 1112, 1113, 1115, 1115, 1115, 1116, 1116, 1116, 1117, 1117, 1118, 1118, 1121,
          1121, 1122, 1123, 1123, 1124, 1125, 1126, 1127, 1127, 1127, 1128, 1129, 1129, 1129, 1130, 1132, 1133, 1133,
          1133, 1136, 1140, 1140, 1141, 1142, 1143, 1145, 1146, 1148, 1148, 1149, 1149, 1150, 1150, 1153, 1154, 1156,
          1156, 1157, 1157, 1159, 1160, 1166, 1166, 1167, 1168, 1168, 1169, 1169, 1169, 1170, 1170, 1171, 1172, 1173,
          1174, 1175, 1176, 1177, 1178, 1179, 1180, 1184, 1185, 1185, 1186, 1186, 1186, 1186, 1187, 1187, 1188, 1188,
          1188, 1189, 1189, 1191, 1191, 1191, 1197, 1197, 1197, 1198, 1200, 1201, 1202, 1204, 1204, 1205, 1207, 1208,
          1210, 1210, 1210, 1210, 1211, 1212, 1215, 1216, 1216, 1218, 1221, 1222, 1224, 1225, 1226, 1226, 1226, 1227,
          1229, 1230, 1231, 1231, 1232, 1233, 1235, 1237, 1240, 1240, 1240, 1241, 1241, 1241, 1242, 1242, 1242, 1245,
          1248, 1248, 1249, 1250, 1251, 1251, 1252, 1253, 1254, 1254, 1255, 1255, 1256, 1256, 1257, 1257, 1260, 1260,
          1262, 1264, 1266, 1270, 1270, 1274, 1275, 1275, 1276, 1277, 1277, 1278, 1280, 1281, 1282, 1286, 1288, 1289,
          1289, 1290, 1291, 1291, 1292, 1293, 1293, 1295, 1298, 1298, 1302, 1302, 1302, 1302, 1303, 1303, 1304, 1305,
          1305, 1306, 1308, 1309, 1312, 1313, 1315, 1315, 1316, 1318, 1318, 1318, 1320, 1322, 1322, 1324, 1324, 1324,
          1326, 1327, 1328, 1329, 1329, 1329, 1330, 1331, 1331, 1334, 1335, 1335, 1336, 1336, 1336, 1337, 1338, 1339,
          1345, 1346, 1347, 1350, 1350, 1351, 1352, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1358, 1360, 1361, 1362,
          1362, 1363, 1364, 1368, 1370, 1370, 1372, 1373, 1374, 1376, 1377, 1379, 1381, 1381, 1382, 1382, 1383, 1384,
          1387, 1387, 1388, 1389, 1389, 1390, 1391, 1395, 1396, 1396, 1396, 1397, 1397, 1400, 1400, 1400, 1402, 1403,
          1406, 1406, 1407, 1407, 1407, 1408, 1408, 1410, 1411, 1413, 1415, 1416, 1416, 1417, 1419, 1419, 1422, 1424,
          1425, 1426, 1426, 1430, 1432, 1433, 1435, 1437, 1437, 1437, 1439, 1439, 1440, 1440, 1440, 1441, 1442, 1442,
          1443, 1444, 1447, 1448, 1450, 1451, 1452, 1453, 1455, 1455, 1457, 1458, 1458, 1458, 1459, 1460, 1462, 1462,
          1464, 1464, 1465, 1465, 1466, 1466, 1467, 1467, 1469, 1471, 1471, 1472, 1473, 1474, 1474, 1477, 1478, 1478,
          1478, 1480, 1480, 1482, 1483, 1483, 1484, 1486, 1487, 1487, 1488, 1489, 1491, 1492, 1492, 1492, 1494, 1494,
          1494, 1495, 1496, 1496, 1498, 1498, 1500, 1501, 1501, 1503, 1505, 1506, 1506, 1508, 1509, 1509, 1509, 1510,
          1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1522, 1523, 1523, 1523, 1524, 1524, 1524, 1525, 1526,
          1526, 1528, 1529, 1530, 1530, 1530, 1531, 1533, 1534, 1534, 1535, 1536, 1538, 1538, 1539, 1539, 1541, 1541,
          1543, 1545, 1548, 1552, 1552, 1552, 1554, 1554, 1555, 1555, 1556, 1557, 1559, 1559, 1559, 1560, 1562, 1564,
          1564, 1565, 1565, 1569, 1570, 1572, 1572, 1573, 1575, 1576, 1578, 1578, 1579, 1583, 1587, 1589, 1589, 1590,
          1590, 1591, 1592, 1593, 1593, 1593, 1594, 1595, 1595, 1596, 1597, 1597, 1598, 1600, 1601, 1602, 1603, 1603,
          1603, 1604, 1605, 1605, 1606, 1608, 1608, 1609, 1609, 1611, 1611, 1611, 1612, 1612, 1614, 1615, 1616, 1616,
          1618, 1618, 1621, 1623, 1623, 1624, 1625, 1625, 1626, 1627, 1628, 1629, 1631, 1631, 1631, 1633, 1633, 1633,
          1634, 1634, 1634, 1635, 1635, 1636, 1637, 1640, 1642, 1643, 1644, 1644, 1646, 1646, 1647, 1648, 1649, 1650,
          1652, 1653, 1654, 1654, 1654, 1655, 1656, 1656, 1657, 1658, 1658, 1660, 1661, 1662, 1663, 1666, 1666, 1668,
          1668, 1669, 1669, 1670, 1670, 1670, 1671, 1673, 1674, 1674, 1676, 1677, 1679, 1680, 1680, 1681, 1682, 1683,
          1684, 1689, 1692, 1696, 1696, 1697, 1698, 1699, 1700, 1700, 1702, 1704, 1705, 1705, 1706, 1709, 1709, 1710,
          1710, 1710, 1710, 1711, 1712, 1713, 1716, 1716, 1716, 1716, 1717, 1721, 1721, 1722, 1722, 1722, 1723, 1724,
          1724, 1725, 1726, 1729, 1729, 1731, 1732, 1732, 1734, 1734, 1734, 1735, 1736, 1736, 1736, 1737, 1738, 1739,
          1742, 1743, 1743, 1743, 1744, 1744, 1744, 1745, 1746, 1746, 1748, 1748, 1749, 1751, 1752, 1752, 1753, 1753,
          1754, 1756, 1757, 1757, 1757, 1757, 1759, 1760, 1761, 1762, 1762, 1764, 1764, 1764, 1764, 1766, 1766, 1767,
          1773, 1773, 1774, 1775, 1776, 1777, 1777, 1777, 1778, 1778, 1779, 1780, 1782, 1782, 1784, 1786, 1790, 1794,
          1795, 1795, 1797, 1800, 1801, 1803, 1803, 1803, 1805, 1806, 1807, 1808, 1808, 1808, 1808, 1809, 1813, 1813,
          1815, 1815, 1817, 1817, 1818, 1819, 1821, 1821, 1822, 1825, 1826, 1826, 1829, 1829, 1830, 1830, 1831, 1831,
          1833, 1834, 1834, 1835, 1835, 1837, 1837, 1837, 1837, 1839, 1841, 1841, 1841, 1842, 1843, 1843, 1844, 1845,
          1847, 1850, 1851, 1851, 1852, 1852, 1854, 1854, 1855, 1856, 1858, 1858, 1858, 1862, 1863, 1863, 1863, 1864,
          1864, 1865, 1865, 1865, 1866, 1866, 1869, 1870, 1870, 1870, 1870, 1870, 1871, 1871, 1872, 1872, 1873, 1873,
          1877, 1879, 1880, 1880, 1882, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1889, 1891, 1891, 1893, 1895,
          1895, 1896, 1896, 1897, 1897, 1897, 1898, 1899, 1900, 1901, 1902, 1905, 1907, 1910, 1911, 1911, 1912, 1912,
          1916, 1916, 1918, 1918, 1920, 1920, 1921, 1922, 1924, 1924, 1924, 1924, 1924, 1925, 1926, 1927, 1927, 1928,
          1929, 1930, 1933, 1933, 1934, 1935, 1936, 1937, 1938, 1938, 1938, 1945, 1945, 1945, 1946, 1950, 1951, 1951,
          1951, 1951, 1953, 1955, 1956, 1956, 1957, 1959, 1959, 1961, 1965, 1965, 1966, 1966, 1967, 1967, 1968, 1971,
          1974, 1974, 1975, 1976, 1977, 1978, 1980, 1980, 1981, 1981, 1981, 1982, 1983, 1984, 1985, 1985, 1985, 1986,
          1986, 1987, 1987, 1987, 1988, 1988, 1989, 1990, 1990, 1992, 1992, 1993, 1993, 1994, 1994, 1994, 1994, 1994,
          1995, 1996, 1996, 1997, 1998, 1999, 2000, 2000, 2000]


def show_run_time(func):
    @functools.wraps(func)
    def _wrap(*args, **kwargs):
        s = time.time()
        try:
            return func(*args, **kwargs)
        finally:
            print(f"{func.__name__} run {time.time() - s} s")

    return _wrap


@show_run_time
def bubble_sort_1(nums, n):
    for i in range(n):
        for j in range(1, n - i):
            if nums[j - 1] > nums[j]:
                nums[j - 1], nums[j] = nums[j], nums[j - 1]


def test_bubble_sort_1():
    b = copy.copy(a)
    bubble_sort_1(b, len(b))
    assert b == result


@show_run_time
def bubble_sort_2(nums, n):
    for i in range(n):
        flag = False
        for j in range(1, n - i):
            if nums[j - 1] > nums[j]:
                nums[j - 1], nums[j] = nums[j], nums[j - 1]
                flag = True
        if not flag:
            return


def test_bubble_sort_2():
    b = copy.copy(a)
    bubble_sort_2(b, len(b))
    assert b == result


@show_run_time
def bubble_sort_3(nums, n):
    flag = n
    while flag > 0:
        i = flag
        flag = 0
        for j in range(1, i):
            if nums[j - 1] > nums[j]:
                nums[j - 1], nums[j] = nums[j], nums[j - 1]
                flag = j


def test_bubble_sort_3():
    b = copy.copy(a)
    bubble_sort_3(b, len(b))
    assert b == result


@show_run_time
def insertion_sort(nums, n):
    for i in range(1, n):
        j = i - 1
        key = nums[i]
        while j >= 0 and key < nums[j]:
            nums[j + 1] = nums[j]
            j -= 1
        nums[j + 1] = key


def test_insertion_sort():
    b = copy.copy(a)
    insertion_sort(b, len(b))
    assert b == result, b


@show_run_time
def shell_sort(nums, n):
    d = n // 2
    while d > 0:
        for i in range(d, n):
            j = i - d
            key = nums[i]
            while j >= 0 and key < nums[j]:
                nums[j + d] = nums[j]
                j -= d
            nums[j + d] = key
        d //= 2


def test_shell_sort():
    b = copy.copy(a)
    shell_sort(b, len(b))
    assert b == result, b


@show_run_time
def select_sort(nums, n):
    for i in range(n):
        min_index = i
        for j in range(i + 1, n):
            if nums[j] < nums[min_index]:
                min_index = j
        nums[i], nums[min_index] = nums[min_index], nums[i]


def test_select_sort():
    b = copy.copy(a)
    select_sort(b, len(b))
    assert b == result, b


# 归并排序
def merge_sort(nums):
    if len(nums) > 1:
        mid = len(nums) // 2
        left, right = nums[:mid], nums[mid:]
        merge_sort(left)
        merge_sort(right)

        k, i, j = 0, 0, 0
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                nums[k] = left[i]
                i += 1
            else:
                nums[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            nums[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            nums[k] = right[j]
            j += 1
            k += 1


def test_merge_sort():
    b = copy.copy(a)
    s = time.time()
    merge_sort(b)
    print(f"merge_sort run {time.time() - s} s")
    assert b == result, b


def heap_adjust(nums, s, e):
    t = nums[s]
    i = s
    j = 2 * i
    while j <= e:
        if j < e and nums[j] < nums[j + 1]:
            j += 1
        if t < nums[j]:
            nums[i] = nums[j]
            i = j
            j = 2 * i
        else:
            break
    nums[i] = t


@show_run_time
def heap_sort(nums):
    nums_length = len(nums) - 1
    first_sort_count = nums_length // 2
    for i in range(first_sort_count):
        heap_adjust(nums, first_sort_count - i, nums_length)
    for j in range(nums_length - 1):
        nums[1], nums[nums_length - j] = nums[nums_length - j], nums[1]
        heap_adjust(nums, 1, nums_length - j - 1)
    return [nums[i] for i in range(1, len(nums))]


def test_heap_sort():
    b = collections.deque(a)
    b.appendleft(0)
    b = heap_sort(b)
    assert b == result, b


@show_run_time
def count_sort(nums):
    """
    计数排序，针对整数，特定浮点数，字符串
    :param nums:
    :return:
    """
    min_data = min(nums)
    max_data = max(nums)

    size = max_data - min_data + 1

    count = [0] * size

    for num in nums:
        count[num - min_data] += 1

    for i in range(1, size):
        count[i] += count[i - 1]

    res = [0] * len(nums)
    for i in range(len(nums) - 1, -1, -1):
        count[nums[i] - min_data] -= 1
        res[count[nums[i] - min_data]] = nums[i]

    return res


def test_count_sort():
    b = copy.copy(a)
    b = count_sort(b)
    assert b == result, b


@show_run_time
def buck_sort(nums):
    """
    桶排序
    :param nums:
    :return:
    """
    min_data = min(nums)
    max_data = max(nums)

    size = max_data - min_data + 1

    count = [0] * size

    for num in nums:
        count[num - min_data] += 1

    for i in range(1, size):
        count[i] += count[i - 1]

    res = [0] * len(nums)
    for i in range(len(nums) - 1, -1, -1):
        count[nums[i] - min_data] -= 1
        res[count[nums[i] - min_data]] = nums[i]

    return res


def test_buck_sort():
    b = copy.copy(a)
    b = buck_sort(b)
    assert b == result, b


@show_run_time
def base_sort_lsd(nums):
    """
    基数排序LSD
    :param nums:
    :return:
    """
    min_data = min(nums)
    max_data = max(nums)

    size = max_data - min_data + 1

    count = [0] * size

    for num in nums:
        count[num - min_data] += 1

    for i in range(1, size):
        count[i] += count[i - 1]

    res = [0] * len(nums)
    for i in range(len(nums) - 1, -1, -1):
        count[nums[i] - min_data] -= 1
        res[count[nums[i] - min_data]] = nums[i]

    return res


def test_base_sort_lsd():
    b = copy.copy(a)
    b = base_sort_lsd(b)
    assert b == result, b


# def select_sort(s):
#     seq = s[:]
#     for i in range(len(seq) - 1, 0, -1):
#         max_j = i
#         for j in range(i):
#             if seq[j] > seq[max_j]:
#                 max_j = j
#         seq[max_j], seq[i] = seq[i], seq[max_j]
#     return seq
#
#
# def select_sort_recursive(seq, i):
#     if i == 0:
#         return
#     max_j = i
#     for j in range(i):
#         if seq[j] > seq[max_j]:
#             max_j = j
#     seq[max_j], seq[i] = seq[i], seq[max_j]
#     select_sort_recursive(seq, i - 1)
#
#
# def test():
#     a = [random.randint(1, 20) for _ in range(10)]
#     print(a)
#     print(merge_sort(a))
#     print(select_sort(a))


if __name__ == '__main__':
    test_bubble_sort_1()
    test_bubble_sort_2()
    test_bubble_sort_3()
    test_insertion_sort()
    test_shell_sort()
    test_select_sort()
    test_merge_sort()
    test_heap_sort()
    test_count_sort()
    test_buck_sort()
    test_base_sort_lsd()
